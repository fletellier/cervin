<?php//putenv('ZF2=../../../vendor/zendframework/zendframework/library');//$loader = include '../../../vendor/autoload.php';//include '../../../init_autoloader.php';/*use Zend\ServiceManager\ServiceManager;use Zend\Mvc\Service\ServiceManagerConfiguration;use Zend\Di\Di;class Bootstrap{	static $serviceManager;	static $di;	static public function go()	{		chdir(dirname(__DIR__));		$loader = include __DIR__ . '/../../../vendor/autoload.php';		include __DIR__ . '/../../../init_autoloader.php';		$config = include __DIR__ . '/../../../config/application.config.php';		Zend\Mvc\Application::init($config);		// Setup ServiceManager		$serviceManager = new ServiceManager(new ServiceManagerConfiguration());		$serviceManager->setService('ApplicationConfiguration', $config);		$serviceManager->get('ModuleManager')->loadModules();		self::$serviceManager = $serviceManager;		// Setup Di		$di = new Di();		$di->instanceManager()->addTypePreference('Zend\ServiceManager\ServiceLocatorInterface', 'Zend\ServiceManager\ServiceManager');		$di->instanceManager()->addTypePreference('Zend\EventManager\EventManagerInterface', 'Zend\EventManager\EventManager');		$di->instanceManager()->addTypePreference('Zend\EventManager\SharedEventManagerInterface', 'Zend\EventManager\SharedEventManager');		self::$di = $di;	}	static public function getServiceManager()	{			return self::$serviceManager;	}	static public function getDi()	{			return self::$di;	}}Bootstrap::go();*/